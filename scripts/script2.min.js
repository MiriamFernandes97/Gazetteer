let userCoords={};const countryList=[];let countryOutline,countryData=null;const light=L.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:19}),dark=L.tileLayer("https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:19,minZoom:1}),satellite=L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",{minZoom:1,attribution:"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"}),earthAtNight=L.tileLayer("https://map1.vis.earthdata.nasa.gov/wmts-webmerc/VIIRS_CityLights_2012/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}",{attribution:'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (<a href="https://earthdata.nasa.gov">ESDIS</a>) with funding provided by NASA/HQ.',maxZoom:8,minZoom:2,format:"jpg",time:"",tilematrixset:"GoogleMapsCompatible_Level"}),precipitation=L.tileLayer("https://tile.openweathermap.org/map/{layer}/{z}/{x}/{y}.png?appid={appId}",{tileSize:512,zoomOffset:-1,layer:"precipitation_new",minZoom:2,appId:"ecdd3db00553f4e381724e72bb3418e5",area:"worldwide"}),temp=L.tileLayer("https://tile.openweathermap.org/map/{layer}/{z}/{x}/{y}.png?appid={appId}",{tileSize:512,minZoom:2,zoomOffset:-1,layer:"temp_new",appId:"ecdd3db00553f4e381724e72bb3418e5",area:"worldwide"}),marker=L.ExtraMarkers.icon({icon:" fa-location-arrow",markerColor:"#BBDEF0",shape:"square",svg:!0,prefix:"fa"}),capitalMarker=L.ExtraMarkers.icon({icon:" fa-location-arrow",markerColor:"#2C95C9",shape:"star",svg:!0,prefix:"fa"}),monumentMarker=L.ExtraMarkers.icon({icon:"fa-binoculars",markerColor:"#AFD5AA",shape:"penta",svg:!0,prefix:"fa"}),map=L.map("map",{center:[39.73,-104.99],zoom:10,zoomControl:!1,layers:[light]});L.control.zoom({position:"topright"}).addTo(map);const baseMaps={Light:light,Dark:dark,Satellite:satellite,"Earth At Night":earthAtNight},weatherOverlays={Temperature:temp,Precipitation:precipitation};L.control.layers(baseMaps,weatherOverlays).addTo(map);const earthquakeLayer=L.layerGroup(),cityLayer=L.layerGroup(),monumentLayer=L.layerGroup(),monumentMarkers=L.markerClusterGroup({iconCreateFunction:t=>L.divIcon({html:`<div><span>${t.getChildCount()}</span></div>`,className:"monument-marker-cluster marker-cluster",iconSize:new L.Point(40,40)})}),infoPopup=t=>{let e;const a=t.target.options;"city"==a.type?e=new City(a.latitude,a.longitude,a.geonameId,a.name,a.population,a.type):"monument"==a.type&&(e=new Monument(a.latitude,a.longitude,a.geonameId,a.name,a.type)),e.getDistanceFromLatLonInKm(userCoords.latitude,userCoords.longitude),e.getWikiDetails(),e.getWeatherInfo()};function displayInfo(){$("#flag").attr("src",countryData.flag),$("#area").html(` ${countryData.area}`),$("#capital").html(` ${countryData.capital}`),$("#currency").html(` ${countryData.currency.name} (${countryData.currency.symbol})`),$("#population").html(` ${countryData.population}`)}function setCountryByCode(t){(countryData=new Country2(t)).getCountryInfo().then(()=>{displayInfo()}),countryOutline&&countryOutline.clearLayers&&countryOutline.clearLayers(),countryData.getPolygon().then(()=>{countryOutline=L.geoJSON(countryData.polygon,{style:{color:"#fd7e14"}}).addTo(map),map.fitBounds(countryOutline.getBounds())}),earthquakeLayer.clearLayers(),countryData.getEarthquakes().then(t=>{t.forEach(t=>{L.circle([t.lat,t.lng],{color:"#dc3545",fillColor:"#9C1C28",fillOpacity:.5,radius:500*Math.pow(t.magnitude,3)}).addTo(earthquakeLayer).bindPopup(`Magnitude: ${t.magnitude} <br> Date: ${t.datetime}`)})}),cityLayer.clearLayers(),countryData.getCities().then(t=>{t.forEach(t=>{L.marker([t.lat,t.lng],{icon:"PPLC"==t.fcode?capitalMarker:marker,type:"city",name:t.name,population:t.population,latitude:t.lat,longitude:t.lng,capital:"PPLC"==t.fcode,geonameId:t.geonameId}).addTo(cityLayer).on("click",infoPopup)})}),monumentLayer.clearLayers(),countryData.getMonuments().then(t=>{t.forEach(t=>{L.marker([t.lat,t.lng],{icon:monumentMarker,name:t.name,latitude:t.lat,longitude:t.lng,type:"monument",geonameId:t.geonameId}).addTo(monumentLayer).on("click",infoPopup)}),monumentMarkers.addLayer(monumentLayer)})}const getCountryCodeFromCoords=(t,e)=>$.ajax({url:"php/getCountryFromCoords.php",type:"POST",dataType:"json",data:{lat:t,lng:e}}).then(t=>{if(t.data.countryCode){return t.data.countryCode}}).catch(()=>{$("#modalTitle").html("Error"),$("#modalBody").html("Unfortunately there was an error"),$("#infoModal").modal()}),jumpToUserLocation=()=>{navigator.geolocation&&navigator.geolocation.getCurrentPosition(t=>{const{longitude:e,latitude:a}=t.coords;userCoords={longitude:e,latitude:a},getCountryCodeFromCoords(a,e).then(t=>{setCountryByCode(t),$("#countrySelect").val(t).change(),adjustFontToFitSearchbar(t)})},t=>{userCoords={longitude:-.118092,latitude:51.509865},alert("Location request denied. Sending you to the UK by default, distances shown will be based on London.")})},loadCountrySelect=()=>{$.ajax({type:"POST",url:"php/getCountry.php",dataType:"json",data:{countryCode:"country"}}).done(t=>{map.locate({setView:!0,maxZoom:5}),$("#countrySelect").html('<option selected="true" disabled>Select a Country</option>'),$.each(t.data,function(e){$("#countrySelect").append($("<option>",{text:t.data[e].name,value:t.data[e].code}))})}).fail(t=>{handleFail()})},onLocationFound=t=>{const e=t.latlng.lat,a=t.latlng.lng;getCountryCodeFromCoords(e,a).then(t=>{$("#countrySelect").val(t).change()})},onLocationError=t=>{alert(t.message)},getCountryList=()=>{$.getJSON("php/getCountryList.php",t=>{$(t).each((t,e)=>{countryList.push(e)})})};$(document).ready(()=>{navigator.geolocation&&navigator.geolocation.getCurrentPosition(t=>{const{longitude:e,latitude:a}=t.coords;userCoords={longitude:e,latitude:a},getCountryCodeFromCoords(a,e).then(t=>{setCountryByCode(t),$("#countrySelect").val(t).change(),adjustFontToFitSearchbar(t)})},t=>{userCoords={longitude:-.118092,latitude:51.509865},alert("Location request denied. Sending you to the UK by default, distances shown will be based on London.")}),$.ajax({type:"POST",url:"php/getCountry.php",dataType:"json",data:{countryCode:"country"}}).done(t=>{map.locate({setView:!0,maxZoom:5}),$("#countrySelect").html('<option selected="true" disabled>Select a Country</option>'),$.each(t.data,function(e){$("#countrySelect").append($("<option>",{text:t.data[e].name,value:t.data[e].code}))})}).fail(t=>{handleFail()}),$.getJSON("php/getCountryList.php",t=>{$(t).each((t,e)=>{countryList.push(e)})}),map.on("locationfound",onLocationFound),map.on("locationerror",onLocationError),map.on("click",onLocationFound),$("#countrySelect").on("change",function(){setCountryByCode(this.value)}),$("#earthquakeBtn").click(()=>{earthquakeLayer.addTo(map)}),$("#cityBtn").click(()=>{map.addLayer(cityLayer)}),$("#monumentBtn").click(()=>{map.addLayer(monumentMarkers)})});